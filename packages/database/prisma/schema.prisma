// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL") // uses connection pooling
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model FellGroup {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String? @db.VarChar(1000)
  imageUrl    String? @db.VarChar(1000)
  published   Boolean @default(true)

  fells Fell[]

  @@map(name: "fell_groups")
}

model Fell {
  id             Int     @id @default(autoincrement())
  name           String  @db.VarChar(1000)
  description    String? @db.VarChar(1000)
  imageUrl       String? @db.VarChar(1000)
  metres         Int
  feet           Int
  lat            Float
  lng            Float
  gridReference  String
  hillBaggingUrl String
  published      Boolean @default(true)

  fellGroups FellGroup[]
  logEntries LogEntry[]

  @@map(name: "fells")
}

model LogEntry {
  id         String  @id @default(cuid())
  comments   String? @db.VarChar(1000)
  climbed    Boolean @default(false)
  camped     Boolean @default(false)
  logGroupId String
  authorId   String
  fellId     Int

  author User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  fell   Fell     @relation(fields: [fellId], references: [id])
  group  LogGroup @relation(fields: [logGroupId], references: [id], onDelete: Cascade)

  @@unique([authorId, fellId])
  @@index([authorId])
  @@index([fellId])
  @@index([logGroupId])
  @@map(name: "log_entries")
}

model LogGroup {
  id       String    @id @default(cuid())
  start    DateTime
  end      DateTime?
  polyline String?   @db.VarChar(2000)
  authorId String
  source   LogSource

  logEntries LogEntry[]
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([start, authorId])
  @@index([authorId])
  @@map(name: "log_groups")
}

model User {
  id            String    @id @default(cuid())
  name          String?   @db.VarChar(1000)
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @db.VarChar(1000)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  logEntries      LogEntry[]
  account         Account[]
  session         Session[]
  userPreferences UserPreferences[]
  logGroups       LogGroup[]
  GearList        GearList[]
  GearItem        GearItem[]

  @@map(name: "users")
}

model UserPreferences {
  id                String   @id @default(cuid())
  userId            String
  metric            Boolean  @default(true)
  imperial          Boolean  @default(false)
  darkMode          Boolean  @default(false)
  fellNotifications Boolean  @default(false)
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "user_preferences")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model GearList {
  id     String @id @default(cuid())
  userId String

  name            String          @default("My List")
  private         Boolean         @default(false)
  measurementType MeasurementType @default(GRAM)

  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories GearCategory[]

  @@index([userId])
  @@map(name: "gear_lists")
}

model GearCategory {
  id         String @id @default(cuid())
  gearListId String

  name  String @db.VarChar(1000)
  order Int    @default(0)

  list                GearList            @relation(fields: [gearListId], references: [id], onDelete: Cascade)
  gearCategoryEntries GearCategoryEntry[]

  @@index([gearListId])
  @@map("gear_categories")
}

model GearCategoryEntry {
  id             String @id @default(cuid())
  gearCategoryId String
  gearItemId     String

  order      Int        @default(0)
  quantity   Int
  weightType WeightType @default(BASE_WEIGHT)

  category GearCategory @relation(fields: [gearCategoryId], references: [id], onDelete: Cascade)
  item     GearItem     @relation(fields: [gearItemId], references: [id], onDelete: Cascade)

  @@index([gearCategoryId])
  @@index([gearItemId])
  @@map("gear_category_entries")
}

model GearItem {
  id     String @id @default(cuid())
  userId String

  name         String        @db.VarChar(1000)
  description  String        @db.VarChar(1000)
  weightGrams  Float
  trackingType TrackingType?

  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  gearCategoryEntries GearCategoryEntry[]

  @@index([userId])
  @@map("gear_items")
}

enum TrackingType {
  DISTANCE
  NIGHTS
}

enum WeightType {
  BASE_WEIGHT
  WORN
  CONSUMABLE
}

enum MeasurementType {
  GRAM
  KG
  OZ
  LB
}

enum LogSource {
  MANUAL
  STRAVA
}
