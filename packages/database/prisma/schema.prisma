// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model FellGroup {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  imageUrl    String?
  published   Boolean @default(true)

  fells Fell[]

  @@map(name: "fell_groups")
}

model Fell {
  id             Int     @id @default(autoincrement())
  name           String
  description    String?
  imageUrl       String?
  metres         Int
  feet           Int
  lat            Float
  lng            Float
  gridReference  String
  hillBaggingUrl String
  published      Boolean @default(true)

  fellGroups FellGroup[]
  logEntries LogEntry[]

  @@map(name: "fells")
}

model LogEntry {
  id         String  @id @default(cuid())
  comments   String?
  climbed    Boolean @default(false)
  camped     Boolean @default(false)
  logGroupId String
  authorId   String
  fellId     Int

  author User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  fell   Fell     @relation(fields: [fellId], references: [id])
  group  LogGroup @relation(fields: [logGroupId], references: [id])

  @@unique([authorId, fellId])
  @@map(name: "log_entries")
}

model LogGroup {
  id       String    @id @default(cuid())
  start    DateTime
  end      DateTime?
  polyline String?
  authorId String
  source   LogSource

  logEntries LogEntry[]
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([start, authorId])
  @@map(name: "log_groups")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  logEntries      LogEntry[]
  account         Account[]
  session         Session[]
  timeouts        UserEventTimeout[]
  userPreferences UserPreferences[]
  logGroups       LogGroup[]

  @@map(name: "users")
}

model UserPreferences {
  id                String   @id @default(cuid())
  userId            String
  metric            Boolean  @default(true)
  imperial          Boolean  @default(false)
  darkMode          Boolean  @default(false)
  fellNotifications Boolean  @default(false)
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "user_preferences")
}

model UserEventTimeout {
  id      String   @id @default(cuid())
  userId  String
  expires DateTime
  event   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "user_event_timeouts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

enum LogSource {
  MANUAL
  STRAVA
}
