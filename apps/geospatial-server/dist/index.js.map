{"version":3,"sources":["../index.ts","../libs/prisma.ts","../libs/kv.ts","../libs/requests.ts","../routes/activities/activities.ts"],"sourcesContent":["// ESM\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nimport Fastify from \"fastify\";\nimport { routes as activities } from \"./routes/activities\";\n\nconst fastify = Fastify({\n  logger: true,\n});\n\nfastify.get(\"/health\", (req, reply) => {\n  reply.status(200).send();\n});\n\nfastify.addHook(\"preHandler\", (req, reply, done) => {\n  if (req.headers[\"x-api-key\"] === process.env.GEOSPATIAL_API_KEY) {\n    done();\n    return;\n  }\n\n  reply.status(401).send();\n});\n\nfastify.register(activities);\n\n/**\n * Run the server!\n */\nconst start = async () => {\n  try {\n    await fastify.listen({ port: 4000 });\n  } catch (err) {\n    fastify.log.error(err);\n    process.exit(1);\n  }\n};\n\nstart();\n","import { PrismaClient } from \"database\";\n\nexport const prisma = new PrismaClient();\n","import kv from \"@vercel/kv\";\n\nexport const getCachedEntry = async <T extends unknown>(key: string, req: () => Promise<T>) => {\n  if (process.env.VERCEL_ENV !== \"production\") {\n    return req();\n  }\n\n  const stored = await kv.get<T>(key);\n\n  if (stored) {\n    return stored;\n  }\n\n  const request = await req();\n  await kv.set(key, request, { ex: 3600 });\n\n  return request;\n};\n","import { prisma } from \"./prisma\";\nimport { getCachedEntry } from \"./kv\";\n\nexport const getFellPoints = () => {\n  return getCachedEntry(\"get-fell-points\", () =>\n    prisma.fell.findMany({\n      select: {\n        id: true,\n        lat: true,\n        lng: true,\n        name: true,\n      },\n    })\n  );\n};\n","import { FastifyInstance, RouteShorthandOptions } from \"fastify\";\n\nimport { prisma } from \"../../libs/prisma\";\nimport { getFellPoints } from \"../../libs/requests\";\nimport { decode } from \"@googlemaps/polyline-codec\";\n\nimport circle from \"@turf/circle\";\nimport { lineString } from \"@turf/helpers\";\nimport lineIntersect from \"@turf/line-intersect\";\n\nconst stravaOpts: RouteShorthandOptions = {\n  schema: {\n    body: {\n      type: \"object\",\n      properties: {\n        polyline: { type: \"string\" },\n        ownerId: { type: \"string\" },\n      },\n    },\n  },\n};\n\nexport async function routes(fastify: FastifyInstance, options: object) {\n  fastify.post(\"/activities/manual\", async (request, reply) => {\n    return { hello: \"world\" };\n  });\n\n  fastify.post(\"/activities/strava\", stravaOpts, async (request, reply) => {\n    const { polyline, ownerId } = request.body as any;\n\n    const stravaAccount = await prisma.account.findUnique({\n      where: {\n        provider_providerAccountId: {\n          providerAccountId: ownerId,\n          provider: \"strava\",\n        },\n      },\n      select: {\n        access_token: true,\n        user: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n      },\n    });\n\n    if (!stravaAccount) {\n      reply.status(401).send();\n      return;\n    }\n\n    const decodedPolyline = decode(polyline);\n    const points = await getFellPoints();\n\n    const line = lineString(decodedPolyline);\n    const circles = points.map((c) => circle([c.lat, c.lng], 0.1, { properties: { id: c.id, name: c.name } }));\n\n    const intersectingCircles = circles.filter((c) => lineIntersect(c, line).features.length > 0);\n    const intersectingIds = intersectingCircles.map((c) => c.properties.id);\n\n    await prisma.logEntry.createMany({\n      skipDuplicates: true,\n      data: intersectingIds.map((id) => ({\n        fellId: id,\n        authorId: stravaAccount.user.id,\n        climbed: true,\n      })),\n    });\n\n    reply.send();\n  });\n}\n"],"mappings":"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","names":["kv","fastify","circle","lineIntersect","Fastify"]}